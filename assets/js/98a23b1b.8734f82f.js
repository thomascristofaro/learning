"use strict";(self.webpackChunkthomascristofaro_learning=self.webpackChunkthomascristofaro_learning||[]).push([[4939],{16211:(e,i,n)=>{n.d(i,{A:()=>a});const a=n.p+"assets/images/API1-974da3e364d25b87d336b22706740f5d.png"},28453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>s});var a=n(96540);const t={},r=a.createContext(t);function o(e){const i=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(r.Provider,{value:i},e.children)}},36619:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"business-central/api/theory","title":"Nozioni di base","description":"API","source":"@site/docs/business-central/11-api/01-theory.md","sourceDirName":"business-central/11-api","slug":"/business-central/api/theory","permalink":"/learning/docs/business-central/api/theory","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"businessCentralSidebar","previous":{"title":"API","permalink":"/learning/docs/category/api"},"next":{"title":"BC API","permalink":"/learning/docs/business-central/api/bc-api"}}');var t=n(74848),r=n(28453);const o={},s="Nozioni di base",l={},c=[{value:"API",id:"api",level:2},{value:"Web Services",id:"web-services",level:2},{value:"REST",id:"rest",level:2},{value:"JSON",id:"json",level:2},{value:"ODATA",id:"odata",level:2},{value:"Business Central",id:"business-central",level:2},{value:"Link utili",id:"link-utili",level:2}];function d(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"nozioni-di-base",children:"Nozioni di base"})}),"\n",(0,t.jsx)(i.h2,{id:"api",children:"API"}),"\n",(0,t.jsx)(i.p,{children:"Le API (Application Programming Interfaces) sono set di definizioni e protocolli usati per costruire e integrare software applicativo. Agiscono come ponti di comunicazione tra diversi software, permettendo loro di interagire tra di loro senza la necessit\xe0 di conoscere i dettagli interni l'uno dell'altro. Le API possono essere utilizzate per diversi scopi, come l'accesso a database, la comunicazione tra software su diverse piattaforme e molto altro."}),"\n",(0,t.jsx)(i.h2,{id:"web-services",children:"Web Services"}),"\n",(0,t.jsx)(i.p,{children:"I Web Services sono un tipo specifico di API che operano su reti internet. Essi permettono alle applicazioni di comunicare tra di loro attraverso la rete, utilizzando standard aperti e universalmente accettati come SOAP (Simple Object Access Protocol) e REST (Representational State Transfer). Questi servizi possono essere accessibili da qualsiasi dispositivo collegato alla rete, offrendo un alto livello di flessibilit\xe0 e interoperabilit\xe0."}),"\n",(0,t.jsx)(i.p,{children:"Quindi, le API forniscono le regole e le specifiche su come i programmi dovrebbero interagire, mentre i Web Services implementano queste API su internet, consentendo agli sviluppatori di creare applicazioni che possono facilmente comunicare e condividere dati e funzionalit\xe0 su diverse piattaforme e dispositivi. Questa interconnessione ha portato a un'espansione senza precedenti delle possibilit\xe0 di integrazione e innovazione nel campo software."}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"API WEBSERVICE",src:n(16211).A+"",width:"770",height:"440"})}),"\n",(0,t.jsx)(i.h2,{id:"rest",children:"REST"}),"\n",(0,t.jsx)(i.p,{children:"REST (Representational State Transfer) \xe8 un tipo di architettura software che definisce un insieme di regole e convenzioni per la creazione di servizi Web. L'approccio architetturale REST \xe8 definito dai dei vincoli applicati ad un'architettura, mentre lascia libera l'implementazione dei singoli componenti (NON \xe8 un protocollo):"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Architettura client-server: l\u2019architettura REST \xe8 costituita da client, server e risorse scambiate tra loro. L'architettura si basa su HTTP. Il funzionamento prevede una struttura degli URL ben definita che identifica univocamente una risorsa o un insieme di risorse e l'utilizzo dei metodi HTTP specifici per il recupero di informazioni (GET), per la modifica (POST, PUT, PATCH, DELETE)."}),"\n",(0,t.jsx)(i.li,{children:"Stateless: nessun contenuto client \xe8 archiviato nel server tra le richieste. Le informazioni relative allo stato della sessione sono invece contenute nel client."}),"\n",(0,t.jsxs)(i.li,{children:["Interfaccia uniforme: \xe8 il vincolo principale per la progettazione di API RESTful e prevede 4 aspetti:","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Identificazione delle risorse nelle richieste: le risorse vengono identificate nelle richieste e vengono distinte dalle rappresentazioni restituite al client."}),"\n",(0,t.jsx)(i.li,{children:"Manipolazione delle risorse tramite le rappresentazioni: i client ricevono file che rappresentano le risorse e che devono contenere le informazioni necessarie per consentirne la modifica o l\u2019eliminazione."}),"\n",(0,t.jsx)(i.li,{children:"Messaggi autodescrittivi: ogni messaggio restituito a un client contiene le informazioni necessarie per descrivere come il client deve elaborare l\u2019informazione."}),"\n",(0,t.jsx)(i.li,{children:"Ipermedia come motore dello stato dell\u2019applicazione: accedendo alla risorsa, il client REST deve poter individuare, attraverso hyperlink, tutte le altre azioni disponibili al momento."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Ecco la tabella che mostra come i metodi HTTP sono tipicamente usati in una API RESTful:"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"URL"}),(0,t.jsx)(i.th,{children:"GET"}),(0,t.jsx)(i.th,{children:"PUT"}),(0,t.jsx)(i.th,{children:"POST"}),(0,t.jsx)(i.th,{children:"DELETE"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"http://api.example.com/resources/"})}),(0,t.jsx)(i.td,{children:"Restituisce un elenco di risorse e altri dettagli delle collezioni."}),(0,t.jsx)(i.td,{children:"Sostituisce l'intera collezione con un'altra."}),(0,t.jsx)(i.td,{children:"Crea un nuovo elemento nella collezione. URI della nuova risorsa assegnato automaticamente (201 Created)."}),(0,t.jsx)(i.td,{children:"Elimina l'intera collezione."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"http://api.example.com/resources/item17"})}),(0,t.jsx)(i.td,{children:"Recupera rappresentazione di item17 della collezione in un formato di dato appropriato."}),(0,t.jsx)(i.td,{children:"Sostituisce l'elemento item17 nella collezione, o lo crea se non esiste."}),(0,t.jsx)(i.td,{children:"Generalmente non usato con PUT. Tratta l'elemento e crea un nuovo elemento all'interno della collezione."}),(0,t.jsx)(i.td,{children:"Elimina l'elemento item17 identificato nella collezione."})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"json",children:"JSON"}),"\n",(0,t.jsx)(i.p,{children:"JSON, che sta per JavaScript Object Notation, \xe8 un formato leggero per lo scambio di dati. \xc8 facile da leggere e scrivere per gli umani e semplice da analizzare e generare per i computer. JSON \xe8 basato su due strutture:"}),"\n",(0,t.jsx)(i.p,{children:"una raccolta di coppie nome/valore (simile agli oggetti in JavaScript)"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-json",children:'{\n    "nome": "Mario Rossi",\n    "eta": 30,\n    "email": "mario.rossi@example.com",\n    "isAttivo": true\n}\n'})}),"\n",(0,t.jsx)(i.p,{children:"e un elenco ordinato di valori (simile agli array in JavaScript)"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-json",children:'{\n    "elenco": ["Mario Rossi", "Luigi Verdi", "Giovanni Bianchi"]\n}\n'})}),"\n",(0,t.jsx)(i.p,{children:"Nelle API, JSON \xe8 ampiamente utilizzato per trasmettere dati tra un server e un client web, in quanto \xe8 molto pi\xf9 efficiente rispetto ad altri formati come XML. Quando si fa una richiesta a un'API web, il server risponde inviando dati in formato JSON, che possono essere facilmente interpretati e utilizzati dall'applicazione client. Questa efficienza e facilit\xe0 d'uso hanno reso JSON il formato dominante per lo scambio di dati nelle applicazioni web moderne."}),"\n",(0,t.jsx)(i.h2,{id:"odata",children:"ODATA"}),"\n",(0,t.jsx)(i.p,{children:"Il Protocollo Open Data o OData \xe8 un protocollo aperto che permette la creazione e il consumo di API RESTful interoperabili e interrogabili in maniera semplice e standard. Esso \xe8 il protocollo utilizzato da Business Central per creare API RESTful."}),"\n",(0,t.jsx)(i.p,{children:"Caratteristiche:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Interrogazioni Complesse: Consente ai client di costruire interrogazioni complesse su dati, usando un URL."}),"\n",(0,t.jsx)(i.li,{children:"Standardizzazione: Offre un approccio standardizzato per esporre, interrogare e manipolare dati attraverso API.\nSupporto per JSON e Atom: Le risposte possono essere formattate in JSON o Atom, rendendo OData flessibile nell'uso."}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Utilizzo:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Accesso ai Dati: Ideale per situazioni in cui \xe8 necessario accedere a set di dati complessi e interrogarli efficacemente."}),"\n",(0,t.jsx)(i.li,{children:"Integrazione di Servizi: Utilizzato in scenari di integrazione dove diverse applicazioni hanno bisogno di comunicare e scambiare dati in modo efficiente."}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Vantaggi:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Interrogazioni Potenti: Permette agli utenti di specificare e filtrare esattamente i dati di cui hanno bisogno."}),"\n",(0,t.jsx)(i.li,{children:"Standardizzazione e Interoperabilit\xe0: Come standard, facilita l'interoperabilit\xe0 tra diverse piattaforme e applicazioni."}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Esempio:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-json",children:'{\n  "@odata.context": "http://services.odata.org/V4/OData/OData.svc/$metadata#Products",\n  "value": [\n    {\n      "ID": 0,\n      "Name": "Bread",\n      "Description": "Whole grain bread",\n      "ReleaseDate": "1992-01-01T00:00:00Z",\n      "DiscontinuedDate": null,\n      "Rating": 4,\n      "Price": 2.5\n    },\n    {\n      "ID": 1,\n      "Name": "Milk",\n      "Description": "Low fat milk",\n      "ReleaseDate": "1995-10-01T00:00:00Z",\n      "DiscontinuedDate": null,\n      "Rating": 3,\n      "Price": 3.5\n    },\n    ...\n  ]\n}\n'})}),"\n",(0,t.jsx)(i.h2,{id:"business-central",children:"Business Central"}),"\n",(0,t.jsxs)(i.p,{children:["In Business Central le API sono di tipologia REST basate su protoccolo OData e sono molto semplici da realizzare. Come vedremo in ",(0,t.jsx)(i.a,{href:"./bc-api",children:"BC API"})," \xe8 possibile creare delle API personalizzate per esporre dati e funzionalit\xe0 di BC. Queste API possono essere utilizzate per integrare BC con altre applicazioni o per creare nuove applicazioni che utilizzano i dati e le funzionalit\xe0 di BC."]}),"\n",(0,t.jsx)(i.h2,{id:"link-utili",children:"Link utili"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://yzhums.com/6117/",children:"Guida BC API"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://learn.microsoft.com/it-it/dynamics365/business-central/dev-itpro/developer/devenv-connect-apps-filtering",children:"Reference for filtering"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://learn.microsoft.com/it-it/training/paths/interface-with-business-central/",children:"Interfacciarsi con Microsoft Dynamics 365 Business Central"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/api-reference/v2.0/enabling-apis-for-dynamics-nav",children:"Enabling Apis"})}),"\n"]})]})}function p(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);