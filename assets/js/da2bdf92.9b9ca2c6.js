"use strict";(self.webpackChunkthomascristofaro_learning=self.webpackChunkthomascristofaro_learning||[]).push([[5933],{24580:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"business-central/al-language/read-record","title":"Leggere e modificare i dati","description":"Cos\'\xe8 un record","source":"@site/docs/business-central/03-al-language/03-read-record.md","sourceDirName":"business-central/03-al-language","slug":"/business-central/al-language/read-record","permalink":"/learning/docs/business-central/al-language/read-record","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"businessCentralSidebar","previous":{"title":"Funzioni e Trigger","permalink":"/learning/docs/business-central/al-language/function-trigger"},"next":{"title":"Scrivere un record","permalink":"/learning/docs/business-central/al-language/write-record"}}');var a=i(74848),o=i(28453);const t={},l="Leggere e modificare i dati",d={},s=[{value:"Cos&#39;\xe8 un record",id:"cos\xe8-un-record",level:2},{value:"Get: accesso diretto",id:"get-accesso-diretto",level:2},{value:"Record.GET()",id:"recordget",level:4},{value:"Ricerca",id:"ricerca",level:2},{value:"Record.FIND()",id:"recordfind",level:4},{value:"FindFirst(), FindLast(), FindSet() e FindNext()",id:"findfirst-findlast-findset-e-findnext",level:3},{value:"FindFirst() e FindLast()",id:"findfirst-e-findlast",level:4},{value:"FindSet()",id:"findset",level:4},{value:"FindNext()",id:"findnext",level:4},{value:"Filtro",id:"filtro",level:3},{value:"Ordinamento",id:"ordinamento",level:3},{value:"Link utili",id:"link-utili",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"leggere-e-modificare-i-dati",children:"Leggere e modificare i dati"})}),"\n",(0,a.jsx)(n.h2,{id:"cos\xe8-un-record",children:"Cos'\xe8 un record"}),"\n",(0,a.jsx)(n.p,{children:"Un record \xe8 una struttura dati che rappresenta un'istanza di un'entit\xe0 o di una tabella del database. Un record contiene un insieme di campi o attributi che rappresentano le diverse informazioni associate a quell'istanza specifica.\nEcco un esempio di come potrebbe apparire un record in linguaggio AL:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:'table 50100 "Cliente"\n{\n    DataClassification = ToBeClassified;\n    \n    DataClassificationFields\n    {\n        // Campi della tabella Cliente\n        field(1; "ID Cliente"; Code[20])\n        {\n            DataClassification = CustomerContent;\n        }\n        field(2; "Nome"; Text[100])\n        {\n            DataClassification = CustomerContent;\n        }\n        field(3; "Indirizzo"; Text[250])\n        {\n            DataClassification = CustomerContent;\n        }\n        // Altri campi della tabella...\n        field(10; "Saldo"; Decimal)\n        {\n            DataClassification = CustomerContent;\n        }\n    }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In questo esempio, la tabella ",(0,a.jsx)(n.code,{children:"Cliente"}),' \xe8 definita con vari campi come "ID Cliente", "Nome", "Indirizzo", "Saldo", ecc. Ogni record all\'interno di questa tabella rappresenta le informazioni associate a un cliente specifico. Ogni campo all\'interno del record contiene un dato specifico, come l\'ID del cliente, il nome, l\'indirizzo e il saldo.\nQuando si programmano applicazioni in linguaggio AL, \xe8 comune manipolare e interagire con i record per effettuare operazioni di lettura, scrittura e aggiornamento dei dati all\'interno del sistema.\nPer accedere ai dati in tabella bisogna dichiarare una variabile di tipo Record specificando il nome della tabella che si desidera leggere. La logica di accesso in AL \xe8:']}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Senza filtri ho accesso all'intero contenuto della tabella"}),"\n",(0,a.jsx)(n.li,{children:"Se inserisco dei filtri posso individuare i record che desidero leggere"}),"\n",(0,a.jsx)(n.li,{children:"La variabile espone sempre i campi contenenti i valori del record corrente"}),"\n",(0,a.jsx)(n.li,{children:"Per leggere altri record devo 'spostarmi' per caricarne i valori"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"get-accesso-diretto",children:"Get: accesso diretto"}),"\n",(0,a.jsxs)(n.p,{children:["L'accesso ai dati pu\xf2 avvenire per accesso diretto al record (quando ne conosco la chiave primaria) utilizzando il comando:\n",(0,a.jsx)(n.strong,{children:"GET(campo/i chiave)"}),"\nAltrimenti devo ricercare i dati in tabella inserendo i filtri ed eseguendo uno dei comandi di ricerca:\n",(0,a.jsx)(n.strong,{children:"FINDFIRST() o FINDLAST()"}),"\n",(0,a.jsx)(n.strong,{children:"FINDSET()"})]}),"\n",(0,a.jsxs)(n.p,{children:["Per scorrere le righe utilizzare un ciclo in combinazione con il metodo ",(0,a.jsx)(n.strong,{children:"NEXT()"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"recordget",children:"Record.GET()"}),"\n",(0,a.jsx)(n.p,{children:"Se la chiave non esiste si genera un errore di run-time.\nPer gestire l'errore innestare il metodo in una condizione if."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:"if CustomerRec.get('4711') then\n.... // Do some processing\nelse\n.... // Do some error processing\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Il metodo ",(0,a.jsx)(n.code,{children:"Record.GET"})," viene utilizzato per recuperare un record specifico all'interno di una tabella.\nEsempio pratico:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:'codeunit 50100 "Esempio Record.GET"\n{\n    var\n        ClienteRec: Record "Customer";\n    procedure AccessoDati()\n    begin\n        // Inizializzazione del record\n        ClienteRec.reset;\n        // Recupera il record con il nr. cliente specificato\n        if ClienteRec.get(\'1001\') then\n        begin\n            // Utilizzo dei dati del record\n            message(\'ID Cliente: %1, Nome: %2\', ClienteRec."No.", ClienteRec."Name");\n        end\n        else\n        begin\n            // Il record non \xe8 stato trovato\n            message(\'Il record non \xe8 stato trovato.\');\n        end;\n    end;\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"ricerca",children:"Ricerca"}),"\n",(0,a.jsx)(n.h4,{id:"recordfind",children:"Record.FIND()"}),"\n",(0,a.jsx)(n.admonition,{title:"Nota",type:"note",children:(0,a.jsx)(n.p,{children:"Il metodo Find \xe8 deprecato (ma ancora presente in base app).\nPreferire i metodi FindFirst(), FindLast() e FindSet()"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:'SalesOrderLine.SetCurrentKey(Type, "No.");\nSalesOrderLine.SetRange(Type, SalesOrderLine.Type::Item);\nSalesOrderLine.SetRange("No.", "No.");\nif SalesOrderLine.Find(\'-\') then\n   Error(Text001, TableCaption, "No.", SalesOrderLine."Document Type");\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Il metodo ",(0,a.jsx)(n.code,{children:"Record.FIND"})," viene utilizzato per cercare un record all'interno di una tabella basandosi su una chiave specifica. Il metodo ",(0,a.jsx)(n.code,{children:"Record.FIND"})," \xe8 spesso seguito dall'utilizzo di altri metodi per navigare attraverso i record trovati.\nEsempio pratico:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:'codeunit 50100 "Esempio Record.FIND"\n{\n    var\n        ClienteRec: Record "Customer";\n    procedure AccessoDati()\n    begin\n        // Inizializzazione del record\n        ClienteRec.reset;\n        ClienteRec.SetRange("No.",\'1001\')\n        // Cerca il record con il nr. cliente specificato\n        if ClienteRec.FIND(\'=\') then\n        begin\n            // Utilizzo dei dati del record\n            message(\'ID Cliente: %1, Nome: %2\', ClienteRec."No.", ClienteRec."Name");\n        end\n        else\n        begin\n            // Il record non \xe8 stato trovato\n            message(\'Il record non \xe8 stato trovato.\');\n        end;\n    end;\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"findfirst-findlast-findset-e-findnext",children:"FindFirst(), FindLast(), FindSet() e FindNext()"}),"\n",(0,a.jsx)(n.p,{children:"Le differenze importanti tra Get e Find sono:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Find utilizza i filtri attuali."}),"\n",(0,a.jsx)(n.li,{children:"Find pu\xf2 cercare i record in cui il valore della chiave \xe8 uguale, maggiore o minore della stringa di ricerca."}),"\n",(0,a.jsx)(n.li,{children:"Find pu\xf2 trovare il primo o l'ultimo record, a seconda dell'ordinamento definito dalla chiave corrente."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"findfirst-e-findlast",children:"FindFirst() e FindLast()"}),"\n",(0,a.jsxs)(n.p,{children:["Se si desidera trovare il primo record in una tabella o in un set, utilizza il metodo FindFirst (Record). Se si desidera trovare l'ultimo record in una tabella o in un set, utilizza il metodo FindLast (Record).\nLa chiamata di ",(0,a.jsx)(n.code,{children:"FindFirst / FindLast"})," su una tabella vuota dal trigger OnNewRecord fa si che Business Central Server generi un'eccezione e l'esecuzione AL venga interrotta. Tuttavia, il client elimina questo errore e non mostra alcun messaggio di errore all'utente. Pertanto, quando si utilizza ",(0,a.jsx)(n.code,{children:"FindFirst / FindLast"})," all'interno di questo trigger, \xe8 necessario aggiungere codice che verifica in modo condizionale se un record \xe8 stato trovato e, in caso negativo, avvisare l'utente con un messaggio.\nEsempio:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:"if not MyRecord.FindFirst then\n    Error('error message');\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:"if not MyRecord.FindLast then\n    Error('error message');\n"})}),"\n",(0,a.jsx)(n.h4,{id:"findset",children:"FindSet()"}),"\n",(0,a.jsx)(n.admonition,{title:"Nota",type:"note",children:(0,a.jsxs)(n.p,{children:["Dovresti utilizzare questo metodo solo quando desideri esplicitamente eseguire il ciclo attraverso un recordset. Dovresti usare questo metodo solo in combinazione con ",(0,a.jsx)(n.code,{children:"repeat..until"}),"."]})}),"\n",(0,a.jsxs)(n.p,{children:["La differenza tra ",(0,a.jsx)(n.code,{children:"Find()"})," e ",(0,a.jsx)(n.code,{children:"FindSet"})," \xe8 che ",(0,a.jsx)(n.code,{children:"Find"})," utilizza il paging e il metodo richiede solo N righe nella prima richiesta, quindi se sono necessarie pi\xf9 righe, invier\xe0 una nuova richiesta SQL. Il metodo ",(0,a.jsx)(n.code,{children:"FindSet"})," richieder\xe0 tutte le righe contemporaneamente.\nLa differenza tra ",(0,a.jsx)(n.code,{children:"FindSet(false)"})," e ",(0,a.jsx)(n.code,{children:"FindSet(true)"})," \xe8 che con ",(0,a.jsx)(n.code,{children:"FindSet(true)"})," verr\xe0 eseguita un'operazione ",(0,a.jsx)(n.code,{children:"LockTable()"})," prima di trovare le righe, il che \xe8 un vantaggio se prevedi di aggiornare tutte le righe che stai trovando.\nL'esempio, riportato sotto, mostra come utilizzare il metodo ",(0,a.jsx)(n.code,{children:"FindSet"})," per scorrere un set e aggiornare un campo."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:'procedure Example()\n    var\n        Customer: Record Customer;\n        SalesHeader: Record "Sales Header";\n    begin\n        Customer.FindFirst();\n        SalesHeader.SetRange("Sell-to Customer No.", Customer."No.");\n        SalesHeader.SetFilter("Bill-to Customer No.", \'<>%1\', Customer."No.");\n        if SalesHeader.FindSet(true) then\n            repeat\n                SalesHeader."Ship-to contact" := SalesHeader."Bill-to Contact";\n                SalesHeader.Modify();\n            until SalesHeader.Next() = 0;\n    end;\n'})}),"\n",(0,a.jsx)(n.h4,{id:"findnext",children:"FindNext()"}),"\n",(0,a.jsxs)(n.p,{children:["La ",(0,a.jsx)(n.code,{children:"FindNext"})," \xe8 una funzione utilizzata per recuperare il record successivo che soddisfa i criteri di ricerca specificati in una tabella.\nEcco un esempio:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:"codeunit 50100 ExampleFindNext\n{\n    procedure FindNextExample()\n    var\n        MyRecord: Record \"My Table\";\n    begin\n        // Inizializza il record\n        MyRecord.SetRange(\"Field1\", 'Value1'); // Imposta il campo su cui eseguire la ricerca\n        if MyRecord.FindSet() then\n        begin\n            // Record trovato\n            repeat\n                // Processa il record corrente\n                Message('Record trovato. Altri dettagli: ' + MyRecord.\"Field2\");\n                // Cerca il record successivo\n            until not MyRecord.FindNext();\n        end\n        else\n        begin\n            // Nessun record trovato\n            Message('Nessun record trovato.');\n        end;\n    end;\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In questo esempio, la funzione FindSet viene utilizzata per trovare il primo record che soddisfa i criteri di ricerca. Successivamente, il ciclo ",(0,a.jsx)(n.code,{children:"'repeat'"})," viene utilizzato insieme a ",(0,a.jsx)(n.em,{children:"FindNext"})," per attraversare tutti i record successivi che soddisfano i criteri. Il processo di elaborazione del record corrente viene ripetuto finch\xe9 ",(0,a.jsx)(n.em,{children:"FindNext"})," restituisce ",(0,a.jsx)(n.strong,{children:"'true'"}),". Se non viene trovato alcun record iniziale con FindSet, viene visualizzato un messaggio che indica che nessun record \xe8 stato trovato."]}),"\n",(0,a.jsx)(n.h3,{id:"filtro",children:"Filtro"}),"\n",(0,a.jsxs)(n.p,{children:["Se invece desideriamo unicamente sapere se esiste almeno un record che rispetta i filtri, per ragioni di performance, \xe8 consigliato utilizzare la funzione ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"ISEMPTY()"})}),". La funzione non leggere tutto il contenuto della tabella, ma ritorna unicamente un booleano che ci dice se esiste oppure no ci\xf2 che abbiamo filtrato.\nRiassumendo, quindi:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"\xe8 utilizzato per verificare la presenza di almeno un record"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["restituisce ",(0,a.jsx)(n.code,{children:"true"})," quando ci sono record che corrispondono ai filtri"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"spesso \xe8 utilizzato in forma negata. Esempio:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:"if not Customer.IsEmpty then\n   Message('Almeno un cliente codificato');\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Vediamo ora le funzioni utilizzate per filtrare i dati in una tabella:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"SetRange"})," viene utilizzato per limitare l'intervallo dei record in una tabella in base ai valori di uno o pi\xf9 campi. Nell'esempio, riportato sotto, ",(0,a.jsx)(n.em,{children:"SetRange"})," viene utilizato per limitare la ricerca ai record in cui il campo \"Field1\" \xe8 uguale a 'Value1'."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:"codeunit 50100 ExampleSetRange\n{\n    procedure SetRangeExample()\n    var\n        MyRecord: Record \"My Table\";\n    begin\n        // Inizializza il record\n        MyRecord.SetRange(\"Field1\", 'Value1'); // Imposta il campo su cui eseguire la ricerca\n        if MyRecord.FindSet() then\n        begin\n            // Record trovato\n            Message('Record trovato. Altri dettagli: ' + MyRecord.\"Field2\");\n        end\n        else\n        begin\n            // Record non trovato\n            Message('Record non trovato.');\n        end;\n    end;\n}\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"SetFilter"})," consente di impostare un filtro per i record in una tabella basato su una formula. Nell'esempio, riportato sotto, ",(0,a.jsx)(n.em,{children:"SetFilter"})," viene utilizzato per impostare un filtro diretto sui record in cui il campo \"Field1\" \xe8 uguale a 'Value1'."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:"codeunit 50101 ExampleSetFilter\n{\n    procedure SetFilterExample()\n    var\n        MyRecord: Record \"My Table\";\n    begin\n        // Inizializza il record\n        MyRecord.SetFilter(\"Field1 = 'Value1'\"); // Imposta il filtro\n        if MyRecord.FindSet() then\n        begin\n            // Record trovato\n            Message('Record trovato. Altri dettagli: ' + MyRecord.\"Field2\");\n        end\n        else\n        begin\n            // Record non trovato\n            Message('Record non trovato.');\n        end;\n    end;\n}\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Reset"})," viene utilizzato per annullare tutti i filtri o intervalli precedentemente impostati su una tabella. Nell'esempio, riportato sotto, dopo aver utilizzato ",(0,a.jsx)(n.em,{children:"SetRange"})," per cercare un record, ",(0,a.jsx)(n.em,{children:"Reset"})," viene utilizzato per annullare il filtro o l'intervallo precedentemente impostato sulla tabella."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:"codeunit 50102 ExampleReset\n{\n    procedure ResetExample()\n    var\n        MyRecord: Record \"My Table\";\n    begin\n        // Inizializza il record\n        MyRecord.SetRange(\"Field1\", 'Value1'); // Imposta il campo su cui eseguire la ricerca\n        if MyRecord.FindSet() then\n        begin\n            // Record trovato\n            Message('Record trovato. Altri dettagli: ' + MyRecord.\"Field2\");\n        end\n        else\n        begin\n            // Record non trovato\n            Message('Record non trovato.');\n        end;\n        // Resetta i filtri e gli intervalli\n        MyRecord.Reset();\n    end;\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"ordinamento",children:"Ordinamento"}),"\n",(0,a.jsxs)(n.p,{children:["L'ordinamento dei record all'interno di una tabella pu\xf2 essere gestito mediante la funzione ",(0,a.jsx)(n.code,{children:"SetCurrentKey"})," abbinata all'opzione ",(0,a.jsx)(n.code,{children:"Ascending"}),". La funzione ",(0,a.jsx)(n.code,{children:"SetCurrentKey"})," viene utilizzata per specificare il campo o i campi in base ai quali verranno ordinati i record. L'opzione ",(0,a.jsx)(n.code,{children:"Ascending"})," indica l'ordine ascendente. Un esempio pu\xf2 essere:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:'codeunit 50104 ExampleSetCurrentKey\n{\n    procedure SetCurrentKeyExample()\n    var\n        MyRecord: Record "My Table";\n    begin\n        // Imposta il campo o i campi e l\'ordine di ordinamento\n        MyRecord.SETCURRENTKEY("Field1", ASCENDING); // Ordinamento ascendente per Field1\n        // Cerca e legge i record ordinati\n        if MyRecord.FINDSET() then\n        begin\n            repeat\n                // Processa il record corrente\n                Message(\'Record: \' + MyRecord."Field1");\n                // Cerca il record successivo\n            until not MyRecord.NEXT();\n        end\n        else\n        begin\n            // Nessun record trovato\n            Message(\'Nessun record trovato.\');\n        end;\n    end;\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In questi esempio, ",(0,a.jsx)(n.em,{children:"SetCurrentKey"}),' viene utilizzato per specificare che i record devono essere ordinati in base al campo "Field1" in ordine ascendete. Successivamente, la funzione ',(0,a.jsx)(n.em,{children:"FindSet"})," viene utilizzata per trovare e leggere i record ordinati. Il ciclo ",(0,a.jsx)(n.em,{children:"repeat"})," con ",(0,a.jsx)(n.em,{children:"NEXT"})," viene utilizzato per attraverso tutti i record trovati.\nSi possono specificare pi\xf9 campi di ordinamento separandoli con virgole all'interno della stringa passata ",(0,a.jsx)(n.em,{children:"SetCurrentKey"}),". Ad esempio:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-al",children:'MyRecord.SETCURRENTKEY("Field1", ASCENDING, "Field2", DESCENDING);\n'})}),"\n",(0,a.jsx)(n.p,{children:'Facendo cos\xec, questo imposta un ordinamento ascendente per "Field1" e un ordinamento discendente per "Field2".'}),"\n",(0,a.jsx)(n.h2,{id:"link-utili",children:"Link utili"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://learn.microsoft.com/it-it/dynamics365/business-central/dev-itpro/developer/methods-auto/record/record-data-type",children:"Record Data Type"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://learn.microsoft.com/it-it/dynamics365/business-central/dev-itpro/developer/devenv-get-find-and-next-methods",children:"Get, Find, and Next Methods"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://learn.microsoft.com/it-it/dynamics365/business-central/dev-itpro/developer/devenv-setcurrentkey-setrange-setfilter-getrangemin-and-getrangemax-methods",children:"Record Filter Functions"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var r=i(96540);const a={},o=r.createContext(a);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);